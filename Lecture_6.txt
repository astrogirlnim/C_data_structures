			 Lecture 6: break, goto, functions

	1. Difference between break and goto
		both are jumps
		for(;;) is an infinite loop
			can also declare/initialize loop
		goto foudnIt
			foudnIt is an identifier, which an be put in front of the next statement you'd like to go to
			e.g. foundIt;
		nested statements, for and a switch
			with nested statements, like to use goto instead
	2. Creating a header file.h
		// Add the declaration for helper file functions
		e.g.
		void printFactors(int n);
		
		In the original file.c, declare the header file
		#include "file.h" --> search for file.h in the current directory

		Then, can declare the include lines in main function file.c
		#include "file.h"
	3. Declarations
		header files has a bunch of declarations in it (initial lines of a code)
			does not contain functions or variable definitions
		sharp include (#include "foo.h")  copies the contents of the file into the source file before the compiler sees it
		therefore, all the content gets pasted into foo.c --> cpp (preprocessor) 
			--> gcc (compiler) --> foo.o --> ld (linker)--> produces executable
		Implementation in the c file may provide the definition of the header file
			both helper function and main function file contain the #include foo.h command
		If files in other directories
			give -I tag to c99 to indicate other directories
	4. .o files and static functions
		factor.o --> compiled/machine code that can be linked to other things
		program nm
			can be used to print out what the object tags are
			e.g. nm factor.o
				providing a routing to undefined variables it is hoping to find somewhere else (e.g. atoi, etc.)
			lowercase t flag is a static file
				it is not going to attempt to use firstFactor to do undefined calls elsewhere
				makes it invisible tothings outside of there
				the linker would not provide the address to any other routines that want to access the static files
		global variables?
	5. Where function variables live in memory
		(Address space)
		Program data at the bottom (executable machine code)
		Global variables --> defined outside functions
			highly recommends not doing that
		Heap --> malloc
		Stack --> top of the address space, grows downward
			where most variables are
			stack pointer gets pushed down to make space for all the variables in a new function
			machine code includes a call to move the stack pointer		
			on return, increase the stack pointer to throw space away (do not change the contents of memory)
				let go of the values in memory, though they do not dissappear
			If variables are not initialized, will get the same variables from the prior procedure
		
		Recursive functions have their own stack frames per each recursion 
	6. Static variables 
		static int n = 0; --> n is allocated with the global variables
			there is exactly one copy of n, put in the beginning of time
			must be a constant
			n will change for that function, but in the same place
		"This feature is mostly useless"
			If want to build a counter object, for e.g., want more than one variable
			This only provides one count
			Occassionally, might have library routines have internal local state that requires it to be static
			might make sense to use that
				Can also use static variable local to a file
	CAN ONLY RETURN A SINGLE VALUE FROM A FUNCTION
